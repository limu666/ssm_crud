1.创建一个maven工程
2.引入项目依赖的jar包
    spring
    springMvc
    mybatis
    数据库连接池，驱动包
    其他（jstl，servlet-api,junit)
3.引入bootstrap前端框架
4.编写ssm整合的关键配置文件
    ~web.xml, spring,springMVC, mybatis,使用mybatis的逆向工程生成对应的bean以及mapper
5.测试mapper


CRUD-查询
1.访问index.jsp页面
2.index.jsp页面发送出查询员工列表请求
3.EmployeeController来接收请求，查出员工数据
4.来到list页面进行展示

URI: /emps

查询-Ajax
1.index.jsp页面直接发送Ajax请求进行员工分页数据的查询
2.服务器将查出的数据，以json字符串的形式返回给浏览器
3.浏览器收到js字符串，可以使用js对json进行解析，使用js通过
dom增删改改变页面
4.返回json实现客户端的无关性

新增-逻辑
1.在index.jsp页面点击“新增“
2.弹出新增对话框
3.去数据库查询部门列表，显示在对话框中
4.用户数据完成保存，并进行校验
    ·jQuery前端校验，Ajax用户名重复校验，重要数据（后端校验（JSR303)，唯一约束）;
5.完成保存

URI:
/emp/{id}  GET查询员工
/emp       POST保存员工
/emp/{id}  PUT修改员工
/emp/{id}  DELETE删除员工

修改-逻辑
1.点击编辑
2.弹出用户修改的模态框（显示用户信息）
3.点击更新，完成用户修改

删除-逻辑
1.单个删除
URI：/emp/{id}  DELETE


